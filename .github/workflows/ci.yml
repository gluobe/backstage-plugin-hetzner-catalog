name: CI

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
  release:
    types: [ published ]

jobs:
  install:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'yarn'
    - run: corepack enable
    - run: yarn install --immutable
    - run: yarn backstage-cli package prepack

  lint:
    runs-on: ubuntu-latest
    needs: install
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'yarn'
    - run: corepack enable
    - run: yarn install --immutable
    - run: yarn lint

  test:
    runs-on: ubuntu-latest
    needs: install
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'yarn'
    - run: corepack enable
    - run: yarn install --immutable
    - run: yarn test

  trivy-scan:
    runs-on: ubuntu-latest
    needs: install
    steps:
    - uses: actions/checkout@v4
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.28.0
      with:
        scan-type: 'fs'
        severity: 'CRITICAL,HIGH'
        exit-code: '1'
        ignore-unfixed: true
        format: 'table'

  build:
    runs-on: ubuntu-latest
    needs: [ lint, test, trivy-scan ]
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'yarn'
    - run: corepack enable
    - run: yarn install --immutable
    - run: yarn build
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
    - name: Cache Yarn
      uses: actions/cache@v4
      with:
        path: |
          .yarn/cache
          .yarn/berry/cache
          .npm
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

  publish:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'
    permissions:
      contents: write
      id-token: write
    env:
      RELEASE_TAG: ${{ github.event.release.tag_name }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        registry-url: 'https://registry.npmjs.org'
        scope: '@gluo-nv'
    - run: corepack enable
    - run: yarn install --immutable
    - name: Set version from release tag
      run: |
        echo "Updating version in package.json to ${RELEASE_TAG}"
        yarn version -i "$RELEASE_TAG"

    - name: Get default branch name
      id: vars
      run: |
        echo "DEFAULT_BRANCH=$(git remote show origin | sed -n '/HEAD branch/s/.*: //p')" >> "$GITHUB_ENV"

    - name: Commit version change
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add package.json
        git commit -m "chore: release v${GITHUB_REF#refs/tags/v}" || echo "No changes to commit"
        git push origin HEAD:$DEFAULT_BRANCH
    - run: npm publish --provenance --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
